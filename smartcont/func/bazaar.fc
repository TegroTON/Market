;; NFT marketplace smart contract
;; Improved and enhanced
;; NOT READY FOR PRODUCTION I SWEAR TO GOD DO NOT TRY USING IT IN THE MAINNET

int deploy_amount() asm "50000000 PUSHINT"; ;; 0.05 TON
int transfer_amount() asm "50000000 PUSHINT"; ;; 0.05 TON

(slice, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return
            (ds~load_msg_addr(), ;; owner_address
                    ds~load_ref(), ;; sale_code
                    ds~load_ref() ;; amounts_cell
            );
}

(int, int) load_amounts(cell amounts_cell) inline {
    var ds = amounts_cell.begin_parse();
    return (
            ds~load_coins(), ;; deploy_amount, how much does it cost to deploy a seller contract
            ds~load_coins() ;; transfer_amount, how much does it cost to transfer an item
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    var (owner_address, sale_code, amounts_cell) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::ownership_assigned()) { ;; It's showtime
        slice prev_owner_address = in_msg_body~load_msg_addr(); ;; Previous owner is the account that put item up for sale
        cell payload = in_msg_body~load_ref(); ;; Load all of the necessary info

        cell state_init = begin_cell()
                .store_uint(0, 2)
                .store_dict(sale_code)
                .store_dict(payload)
                .store_uint(0, 1)
                .end_cell();

        slice sale_address = begin_cell()
                .store_uint(4, 3)
                .store_int(workchain(), 8)
                .store_uint(cell_hash(state_init), 256)
                .end_cell()
                .begin_parse();

        ;; Deploying seller contract
        var sale_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sale_address)
                .store_coins(deploy_amount())
                .store_uint(4 + 2 + 0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init);
        send_raw_message(sale_msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

        ;; Transferring the item to the newly created seller contract
        var item_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(transfer_amount())
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(
                        begin_cell()
                                .store_uint(op::transfer(), 32)
                                .store_uint(query_id, 64)
                                .store_slice(sale_address) ;; new_owner_address
                                .store_slice(sale_address) ;; response_address - rest of the coins goes there
                                .store_int(0, 1) ;; empty custom_payload
                                .store_coins(0) ;; forward amount to new_owner_address
                                .store_int(0, 1) ;; empty forward_payload
                                .end_cell()
                );

        send_raw_message(item_msg.end_cell(), 2 + 1); ;; ignore errors. Worst case scenario - we keep item ownership. Fees separately

        ;; Todo: Confirmation message?

        return ();
    }

    throw(0xFFFF);
}

() recv_external(slice in_msg) impure {
}
