schema {
  query: Query
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Collection {
  address: ID!
  coverImage: String
  description: String
  image: String
  itemNumber: String
  items(drop: Int, take: Int): [Item!]!
  name: String
  owner: Profile
  ownerNumber: String!
}

type Item {
  address: ID!
  attributes: [ItemAttribute!]!
  collection: Collection
  description: String
  image: String
  index: String
  name: String
  owner: Profile
  royalty: Royalty
  sale: Sale
  transfer(newOwner: String!, responseDestination: String): TransactionRequest!
}

type ItemAttribute {
  trait: String!
  value: String!
}

type Profile {
  address: ID!
  collections(drop: Int, take: Int): [Collection!]!
  ownedItems(drop: Int, take: Int): [Item!]!
}

type Query {
  collection(address: String!): Collection!
  collections(drop: Int, take: Int): [Collection!]!
  item(address: String!): Item!
  profile(address: String!): Profile!
}

type Royalty {
  destination: String!
  value: Float!
}

type Sale {
  address: ID!
  buyPrice: String
  fullPrice: String
  marketplaceFee: String
  networkFee: String!
  royaltyAmount: String
}

type TransactionRequest {
  dest: String!
  payload: String
  stateInit: String
  text: String
  value: String!
}
